(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{391:function(t,s,a){"use strict";a.r(s);var n=a(10),v=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"算法-kmp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法-kmp"}},[t._v("#")]),t._v(" "),s("center",[t._v("算法-KMP"),s("center")],1)],1),t._v(" "),s("h2",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("p",[t._v("KMP 算法（Knuth-Morris-Pratt 算法）是一种高效的字符串匹配算法。它由 Donald Knuth、Vaughan Pratt 和 James H. Morris 于 1977 年共同开发。KMP 算法的工作原理是，先计算出一个next数组，该数组存储了模式串中所有前缀和后缀的最大公共前缀长度。然后，从模式串的第一个字符开始，逐个与文本串的字符进行比较。如果两个字符相等，则模式串和文本串的指针同时向后移动一个字符。如果两个字符不相等，则模式串的指针向后移动 next[模式串指针] 个字符")]),t._v(" "),s("p",[t._v("KMP 算法的时间复杂度为 O(m + n)，其中 m 是模式串的长度，n 是文本串的长度。KMP 算法是基于模式串的局部性原理，即模式串中相邻的字符更容易相等。KMP 算法通过先计算出一个next数组，来避免重复比较模式串中已经比较过的字符。")]),t._v(" "),s("h2",{attrs:{id:"个人理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#个人理解"}},[t._v("#")]),t._v(" 个人理解")]),t._v(" "),s("h3",{attrs:{id:"对比bf算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对比bf算法"}},[t._v("#")]),t._v(" 对比BF算法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("i")]),t._v(" "),s("th",[t._v("i")]),t._v(" "),s("th",[t._v("s")]),t._v(" "),s("th",[t._v("f")]),t._v(" "),s("th",[t._v("i")]),t._v(" "),s("th",[t._v("s")]),t._v(" "),s("th",[t._v("h")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("f")]),t._v(" "),s("td",[t._v("i")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("i")]),t._v(" "),s("th",[t._v("i")]),t._v(" "),s("th",[t._v("s")]),t._v(" "),s("th",[t._v("f")]),t._v(" "),s("th",[t._v("i")]),t._v(" "),s("th",[t._v("s")]),t._v(" "),s("th",[t._v("h")])])]),t._v(" "),s("tbody",[s("tr",[s("td"),t._v(" "),s("td",[t._v("f")]),t._v(" "),s("td",[t._v("i")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("i")]),t._v(" "),s("th",[t._v("i")]),t._v(" "),s("th",[t._v("s")]),t._v(" "),s("th",[t._v("f")]),t._v(" "),s("th",[t._v("i")]),t._v(" "),s("th",[t._v("s")]),t._v(" "),s("th",[t._v("h")])])]),t._v(" "),s("tbody",[s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td",[t._v("f")]),t._v(" "),s("td",[t._v("i")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("i")]),t._v(" "),s("th",[t._v("i")]),t._v(" "),s("th",[t._v("s")]),t._v(" "),s("th",[t._v("f")]),t._v(" "),s("th",[t._v("i")]),t._v(" "),s("th",[t._v("s")]),t._v(" "),s("th",[t._v("h")])])]),t._v(" "),s("tbody",[s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td",[t._v("f")]),t._v(" "),s("td",[t._v("i")]),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("p",[t._v("BF算法在遇到不匹配的的字符时，会跳到当前开始匹配字符的下一个，会有一个回溯的操作，如果模式串有重复的部分，那么这个回溯步骤则有优化空间，可以不进行回溯，直至将模式串比对项移到重复的位置开始比较.")]),t._v(" "),s("h3",{attrs:{id:"模式串没有重复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式串没有重复"}},[t._v("#")]),t._v(" 模式串没有重复")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("k")]),t._v(" "),s("th",[t._v("e")]),t._v(" "),s("th",[t._v("x")]),t._v(" "),s("th",[t._v("i")]),t._v(" "),s("th",[t._v("o")]),t._v(" "),s("th",[t._v("n")]),t._v(" "),s("th",[s("span",{staticStyle:{color:"red"}},[t._v("g")])]),t._v(" "),s("th",[t._v(".")]),t._v(" "),s("th",[t._v("c")]),t._v(" "),s("th",[t._v("o")]),t._v(" "),s("th",[t._v("m")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("k")]),t._v(" "),s("td",[t._v("e")]),t._v(" "),s("td",[t._v("x")]),t._v(" "),s("td",[t._v("i")]),t._v(" "),s("td",[t._v("o")]),t._v(" "),s("td",[t._v("n")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("c")])]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("p",[t._v("字符串可以直接匹配到"),s("code",[t._v("kexion")]),t._v(",下一位"),s("code",[t._v("g")]),t._v("和"),s("code",[t._v("c")]),t._v("不匹配，由于模式串不重复，需要将模式串第一位对齐"),s("code",[t._v("g")]),t._v("重新匹配")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("k")]),t._v(" "),s("th",[t._v("e")]),t._v(" "),s("th",[t._v("x")]),t._v(" "),s("th",[t._v("i")]),t._v(" "),s("th",[t._v("o")]),t._v(" "),s("th",[t._v("n")]),t._v(" "),s("th",[s("span",{staticStyle:{color:"red"}},[t._v("g")])]),t._v(" "),s("th",[t._v(".")]),t._v(" "),s("th",[t._v("c")]),t._v(" "),s("th",[t._v("o")]),t._v(" "),s("th",[t._v("m")]),t._v(" "),s("th"),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("k")])]),t._v(" "),s("td",[t._v("e")]),t._v(" "),s("td",[t._v("x")]),t._v(" "),s("td",[t._v("i")]),t._v(" "),s("td",[t._v("o")]),t._v(" "),s("td",[t._v("n")]),t._v(" "),s("td",[t._v("c")])])])]),t._v(" "),s("h3",{attrs:{id:"模式串重复情况1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式串重复情况1"}},[t._v("#")]),t._v(" 模式串重复情况1")]),t._v(" "),s("table",[s("thead",[s("td",[t._v("w")]),t._v(" "),s("td",[t._v("w")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("w")])]),t._v(" "),s("td",[t._v(".")]),t._v(" "),s("td",[t._v("k")]),t._v(" "),s("td",[t._v("e")]),t._v(" "),s("td",[t._v("x")]),t._v(" "),s("td",[t._v("i")]),t._v(" "),s("td",[t._v("o")]),t._v(" "),s("td",[t._v("n")]),t._v(" "),s("td",[t._v("g")]),t._v(" "),s("td",[t._v(".")]),t._v(" "),s("td",[t._v("c")]),t._v(" "),s("td",[t._v("o")]),t._v(" "),s("td",[t._v("m")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("w")]),t._v(" "),s("td",[t._v("w")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v(".")])]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("p",[s("code",[t._v("w")]),t._v("和"),s("code",[t._v(".")]),t._v("匹配不上，但也不需要将模式串移到首位，如下")]),t._v(" "),s("table",[s("thead",[s("td",[t._v("w")]),t._v(" "),s("td",[t._v("w")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("w")])]),t._v(" "),s("td",[t._v(".")]),t._v(" "),s("td",[t._v("k")]),t._v(" "),s("td",[t._v("e")]),t._v(" "),s("td",[t._v("x")]),t._v(" "),s("td",[t._v("i")]),t._v(" "),s("td",[t._v("o")]),t._v(" "),s("td",[t._v("n")]),t._v(" "),s("td",[t._v("g")]),t._v(" "),s("td",[t._v(".")]),t._v(" "),s("td",[t._v("c")]),t._v(" "),s("td",[t._v("o")]),t._v(" "),s("td",[t._v("m")])]),t._v(" "),s("tbody",[s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td",[t._v("w")]),t._v(" "),s("td",[t._v("w")]),t._v(" "),s("td",[t._v(".")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("p",[t._v("其中"),s("code",[t._v("w")]),t._v("是重复的，可以跳过重复的"),s("code",[t._v("w")]),t._v("，如下")]),t._v(" "),s("table",[s("thead",[s("td",[t._v("w")]),t._v(" "),s("td",[t._v("w")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("w")])]),t._v(" "),s("td",[t._v(".")]),t._v(" "),s("td",[t._v("k")]),t._v(" "),s("td",[t._v("e")]),t._v(" "),s("td",[t._v("x")]),t._v(" "),s("td",[t._v("i")]),t._v(" "),s("td",[t._v("o")]),t._v(" "),s("td",[t._v("n")]),t._v(" "),s("td",[t._v("g")]),t._v(" "),s("td",[t._v(".")]),t._v(" "),s("td",[t._v("c")]),t._v(" "),s("td",[t._v("o")]),t._v(" "),s("td",[t._v("m")])]),t._v(" "),s("tbody",[s("tr",[s("td"),t._v(" "),s("td",[t._v("w")]),t._v(" "),s("td",[t._v("w")]),t._v(" "),s("td",[t._v(".")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("h3",{attrs:{id:"模式串重复情况2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式串重复情况2"}},[t._v("#")]),t._v(" 模式串重复情况2")]),t._v(" "),s("table",[s("thead",[s("td",[t._v("b")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("s")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("c")])]),t._v(" "),s("td",[t._v("c")]),t._v(" "),s("td",[t._v("d")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("x")]),t._v(" "),s("td",[t._v("y")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("b")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("s")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("s")])]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("p",[s("code",[t._v("c")]),t._v("和"),s("code",[t._v("s")]),t._v("不匹配,我们希望的匹配项如下")]),t._v(" "),s("table",[s("thead",[s("td",[t._v("b")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("s")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("c")])]),t._v(" "),s("td",[t._v("c")]),t._v(" "),s("td",[t._v("d")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("x")]),t._v(" "),s("td",[t._v("y")])]),t._v(" "),s("tbody",[s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("s")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("s")]),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("h3",{attrs:{id:"归纳"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#归纳"}},[t._v("#")]),t._v(" 归纳")]),t._v(" "),s("p",[t._v("模式串移动的位置，若没有重复，则移动到模式串开头，若有重复，则移动到最大重复子位置，具体来说是最长相等的前缀和后缀")]),t._v(" "),s("h2",{attrs:{id:"最长相等前后缀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最长相等前后缀"}},[t._v("#")]),t._v(" 最长相等前后缀")]),t._v(" "),s("p",[t._v("以模式串"),s("code",[t._v("aabaaf")]),t._v("为例,逐个分析他的子串")]),t._v(" "),s("ul",[s("li",[t._v("a")]),t._v(" "),s("li",[s("ul",[s("li",[t._v("首字母即尾字母,没有前缀和后缀")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("最长相等前后缀长度 0")])])]),t._v(" "),s("li",[t._v("aa")]),t._v(" "),s("li",[s("ul",[s("li",[t._v("前缀 "),s("code",[t._v("a")])])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("后缀 "),s("code",[t._v("a")])])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("最长相等前后缀长度 1")])])]),t._v(" "),s("li",[t._v("aab")]),t._v(" "),s("li",[s("ul",[s("li",[t._v("前缀 "),s("code",[t._v("a")]),t._v(" "),s("code",[t._v("aa")])])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("后缀 "),s("code",[t._v("b")]),t._v(" "),s("code",[t._v("ab")])])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("最长相等前后缀长度 0")])])]),t._v(" "),s("li",[t._v("aaba")]),t._v(" "),s("li",[s("ul",[s("li",[t._v("前缀 "),s("code",[t._v("a")]),t._v(" "),s("code",[t._v("aa")]),t._v(" "),s("code",[t._v("aab")])])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("后缀 "),s("code",[t._v("a")]),t._v(" "),s("code",[t._v("ba")]),t._v(" "),s("code",[t._v("aba")])])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("最长相等前后缀长度 1")])])]),t._v(" "),s("li",[t._v("aabaa")]),t._v(" "),s("li",[s("ul",[s("li",[t._v("前缀 "),s("code",[t._v("a")]),t._v(" "),s("code",[t._v("aa")]),t._v(" "),s("code",[t._v("aab")]),t._v(" "),s("code",[t._v("aaba")])])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("后缀 "),s("code",[t._v("a")]),t._v(" "),s("code",[t._v("aa")]),t._v(" "),s("code",[t._v("baa")]),t._v(" "),s("code",[t._v("abaa")])])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("最长相等前后缀长度 2")])])]),t._v(" "),s("li",[t._v("aabaaf")]),t._v(" "),s("li",[s("ul",[s("li",[t._v("前缀 "),s("code",[t._v("a")]),t._v(" "),s("code",[t._v("aa")]),t._v(" "),s("code",[t._v("aab")]),t._v(" "),s("code",[t._v("aaba")]),t._v(" "),s("code",[t._v("aaba")])])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("后缀 "),s("code",[t._v("f")]),t._v(" "),s("code",[t._v("af")]),t._v(" "),s("code",[t._v("aaf")]),t._v(" "),s("code",[t._v("baaf")]),t._v(" "),s("code",[t._v("abaaf")])])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("最长相等前后缀长度 0")])])])]),t._v(" "),s("p",[t._v("将"),s("code",[t._v("最长相等前后缀长度")]),t._v("统计一下: [0, 1, 0, 1, 2, 0],称之为前缀表\n"),s("table",[s("thead",[s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("f")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("0")])])])])]),t._v(" "),s("h3",{attrs:{id:"使用前缀表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用前缀表"}},[t._v("#")]),t._v(" 使用前缀表")]),t._v(" "),s("p",[t._v("举例使用字符串"),s("code",[t._v("aabaabaaf")]),t._v("来匹配刚才的模式串"),s("code",[t._v("aabaaf")]),t._v(" "),s("table",[s("thead",[s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("b")])]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("f")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("f")])]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])])]),t._v(" "),s("p",[s("code",[t._v("b")]),t._v("和"),s("code",[t._v("f")]),t._v("匹配不上,在前缀表中找到不匹配的字符(即"),s("code",[t._v("f")]),t._v(")的前一个字符(即"),s("code",[t._v("a")]),t._v(")的最长相等前后缀，即:\n"),s("table",[s("thead",[s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("a")])]),t._v(" "),s("td",[t._v("f")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[s("span",{staticStyle:{color:"red"}},[t._v("2")])]),t._v(" "),s("td",[t._v("0")])])])])]),t._v(" "),s("p",[t._v("值是"),s("code",[t._v("2")]),t._v("，意味着这里有一个后缀有一个与其相等的前缀,这里前后缀相等，可以跳过比较。这个前缀的后边一位在模式串中的下标就是"),s("code",[t._v("2")]),t._v("，移动后如下:\n"),s("table",[s("thead",[s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("f")])]),t._v(" "),s("tbody",[s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("b")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("a")]),t._v(" "),s("td",[t._v("f")])])])])]),t._v(" "),s("p",[t._v("KMP算法的精髓就在于这个前缀表，通过查表跳过重复的匹配项")]),t._v(" "),s("h3",{attrs:{id:"实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("tsc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--init")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" kmp.ts\n")])])]),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("KMP")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" next"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("countNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this.myCount()")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 我自己按照上面逻辑实现的求取next数组方法，\n     * 但性能比低下\n     * 我都有点怀疑按照这个逻辑，没必要用KMP算法，因为在求next数组的开销就不小于BF算法\n     * 所以不可取\n     * 有一定优化空间，但比起gpt的答案差太多，没心思优化~~\n    */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subStr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" subStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  subStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" end "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" subStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 这是gpt给出的实现，性能高出上面逻辑很多\n    */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("countNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// next[0]设置成0")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n         * 这是gpt生成的算法，效率比起我自己实现的高很多，但是思路很绕\n         * 思路大致如下:\n         * 假设已知next[i-1]=k (实际上不知),由前缀等于后缀可得:\n         * t(0) t(1) ... t(i-1) == t(i+1) t(i+2) ... t(2i)\n         * 如果t(k) == t(2i),那么next[i] = k+1 (原有的字串增加了一位，且增加的字符等于t(k))\n         * 反之t(k) != t(2i),那么k需要回退到next[k-1]继续重复以上比较\n         * 如果退到首位还不相等,那么说明如果在主串和模式串对比到这个字符，且不相等，需要退回的位置就是起始位置,即:0\n        */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" k\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配字符串")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主串和模式串相等，那么主串和模式串都移到下一个字符比较即可")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即 i++ j++")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n                j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果不相等，模式串查表退回。注意不要越界")]),t._v("\n                j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模式串退到开头了也匹配不上，当前字符匹配不上了。主串移到下一个字符进行比较")]),t._v("\n                i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" kmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("KMP")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aabaaf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("kmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("kmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aabaabaaf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("kmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hahahh'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("tsc\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("node")]),t._v(" ./tmp.js\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[ 0, 1, 0, 1, 2, 0 ]\n3\n-1\n")])])])])}),[],!1,null,null,null);s.default=v.exports}}]);