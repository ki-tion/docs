(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{383:function(t,e,n){"use strict";n.r(e);var l=n(10),r=Object(l.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"数据结构-二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-二叉树"}},[t._v("#")]),t._v(" "),e("center",[t._v("数据结构-二叉树")])],1),t._v(" "),e("h2",{attrs:{id:"定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),e("p",[t._v("二叉树是计算机科学中的数据结构，它由节点组成，每个节点最多有两个子节点。根节点是二叉树的顶部节点，每个子节点可以是左子节点或右子节点。如果节点没有子节点，则称为叶子节点。")]),t._v(" "),e("p",[t._v("二叉树有许多不同的类型，包括：")]),t._v(" "),e("ul",[e("li",[t._v("二叉搜索树：二叉搜索树是排序的二叉树，这意味着每个节点的值都大于或等于其左子节点的值，小于或等于其右子节点的值。")]),t._v(" "),e("li",[t._v("完全二叉树：完全二叉树是每个层都填满的二叉树，除非顶层只有一个节点。")]),t._v(" "),e("li",[t._v("平衡二叉树：平衡二叉树是每个节点的高度差不超过 1 的二叉树。")])]),t._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('package main\n\nimport (\n\t"fmt"\n\t"math"\n\t"strconv"\n)\n\n// 二叉树\ntype Tree struct {\n\tParent     *Tree\n\tLeftChild  *Tree\n\tRightChild *Tree\n\tValue      int\n}\n\nfunc (t *Tree) getRoot() *Tree {\n\troot := t\n\tfor root.Parent != nil {\n\t\troot = root.Parent\n\t}\n\treturn root\n}\n\nfunc (t *Tree) nodeSize() uint {\n\tvar size uint = 1\n\tif t.LeftChild != nil {\n\t\tsize += t.LeftChild.nodeSize()\n\t}\n\tif t.RightChild != nil {\n\t\tsize += t.RightChild.nodeSize()\n\t}\n\treturn size\n}\n\n// 生成指定层数的二叉树\nfunc createTree(list []*Tree, level uint) {\n\tlength := len(list)\n\tcurrentLevel := uint(math.Log2(float64(length)) + 1)\n\tleaves := []*Tree{}\n\tif currentLevel < level {\n\t\tfor i := 0; i < length; i++ {\n\t\t\tleft := &Tree{\n\t\t\t\tParent: list[i],\n\t\t\t\tValue:  int(currentLevel)*100 + i*10,\n\t\t\t}\n\t\t\tright := &Tree{\n\t\t\t\tParent: list[i],\n\t\t\t\tValue:  int(currentLevel)*100 + i*10 + 1,\n\t\t\t}\n\n\t\t\tlist[i].LeftChild = left\n\t\t\tlist[i].RightChild = right\n\t\t\tleaves = append(leaves, left, right)\n\t\t}\n\t\tcreateTree(leaves, level)\n\t}\n}\n\nfunc consoleAllValue(tree *Tree) {\n\tif tree == nil {\n\t\treturn\n\t}\n\tconsoleAllValue(tree.LeftChild)\n\tconsoleAllValue(tree.RightChild)\n\tfmt.Println(tree.Value)\n}\n\nfunc main() {\n\ttree := &Tree{Value: 0}\n\tlist := []*Tree{}\n\tlist = append(list, tree)\n\tcreateTree(list, 3)\n\n\tfmt.Println(\n\t\t"节点数:" +\n\t\t\tstrconv.FormatUint(\n\t\t\t\tuint64(tree.getRoot().nodeSize()),\n\t\t\t\t10,\n\t\t\t),\n\t)\n\tconsoleAllValue(tree.getRoot())\n}\n')])])]),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("go run ."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("main.go\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("节点数:7\n200\n201\n100\n210\n211\n101\n0 \n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);