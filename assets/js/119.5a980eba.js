(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{401:function(t,a,s){"use strict";s.r(a);var n=s(10),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"算法-直接插入排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法-直接插入排序"}},[t._v("#")]),t._v(" "),a("center",[t._v("算法-直接插入排序"),a("center")],1)],1),t._v(" "),a("h2",{attrs:{id:"基本思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本思想"}},[t._v("#")]),t._v(" 基本思想")]),t._v(" "),a("p",[t._v("在插入第i(i>1)个元素时，前面的i-1个元素已经有序，只需将第i个元素插入到前面已排序的序列中即可。")]),t._v(" "),a("h2",{attrs:{id:"算法描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法描述"}},[t._v("#")]),t._v(" 算法描述")]),t._v(" "),a("p",[t._v("开始时默认第一个元素是有序的，从第二个元素开始，比较其和上一个元素的大小，若小于上一个元素，则将该元素插入到上一个元素之前(具体体现为交换元素值)，否则将该元素插入到该元素之后(具体体现为跳到下一个元素，重复刚才的步骤)。")]),t._v(" "),a("h2",{attrs:{id:"适用范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适用范围"}},[t._v("#")]),t._v(" 适用范围")]),t._v(" "),a("p",[t._v("适用于待排序数据基本有序，或数组元素较少的情况。")]),t._v(" "),a("h2",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('package main\n\nimport "fmt"\n\nfunc sort(list []int) {\n\tlength := len(list)\n\t// 0个或1个元素不用排序\n\tif length <= 1 {\n\t\treturn\n\t}\n\n\t// 从1开始，第0个默认有序\n\tfor index := 1; index < length; index++ {\n\t\tc := index\n\t\t// 若后一个小于前一个，交换值后跳到前一个重复检查\n\t\tfor c > 0 && list[c] < list[c-1] {\n\t\t\tlist[c], list[c-1] = list[c-1], list[c]\n\t\t\tc--\n\t\t}\n\t}\n}\n\nfunc main() {\n\tlist := []int{21, 25, 22, 10, 25, 18}\n\tsort(list)\n\tfmt.Println(list)\n}\n\n')])])]),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("go run ."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("main.go\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[10 18 21 22 25 25]\n")])])]),a("h2",{attrs:{id:"个人理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#个人理解"}},[t._v("#")]),t._v(" 个人理解")]),t._v(" "),a("p",[t._v("插入排序将数据分为已排序和未排序两部分，假定第i个之前为已排序，之后为未排序。每次只需要处理第一个未排序的元素，将其插入到合适的已排序的序列中，然后将未排序的元素向后移动，重复上述步骤。")])])}),[],!1,null,null,null);a.default=e.exports}}]);