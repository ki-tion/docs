(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{315:function(e,t,a){"use strict";a.r(t);var s=a(10),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"centos7安装docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#centos7安装docker"}},[e._v("#")]),e._v(" "),t("center",[e._v("centos7安装docker")])],1),e._v(" "),t("p",[t("a",{attrs:{href:"https://hub.docker.com/"}},[e._v("docker网址")])]),e._v(" "),t("p",[t("code",[e._v("uname -a")]),e._v("查看内核，docker官方说至少3.8以上，建议3.10以上")]),e._v(" "),t("h2",{attrs:{id:"更新yum包-安装需要的软件包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更新yum包-安装需要的软件包"}},[e._v("#")]),e._v(" 更新yum包&安装需要的软件包")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("yum update "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v("\nyum "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" yum-utils device-mapper-persistent-data lvm2\n")])])]),t("h2",{attrs:{id:"设置yum源-选择其中一个-我选的阿里仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置yum源-选择其中一个-我选的阿里仓库"}},[e._v("#")]),e._v(" 设置yum源（选择其中一个,我选的阿里仓库）")]),e._v(" "),t("p",[e._v("中央仓库:")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo\n")])])]),t("p",[e._v("阿里仓库:")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n")])])]),t("p",[e._v("可以查看所有仓库中所有docker版本，并选择特定版本安装")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("yum list docker-ce "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--showduplicates")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sort")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-r")]),e._v("\n")])])]),t("h2",{attrs:{id:"安装docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装docker"}},[e._v("#")]),e._v(" 安装Docker")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("yum "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" docker-ce "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v("\n")])])]),t("h2",{attrs:{id:"启动docker-并加入开机启动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动docker-并加入开机启动"}},[e._v("#")]),e._v(" 启动Docker,并加入开机启动")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("systemctl start "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\nsystemctl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" \n")])])]),t("h2",{attrs:{id:"配置阿里云加速-否则不能下载镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置阿里云加速-否则不能下载镜像"}},[e._v("#")]),e._v(" 配置阿里云加速，否则不能下载镜像")]),e._v(" "),t("p",[e._v("不要直接用vim，否则有权限问题")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("touch")]),e._v(" /etc/docker/daemon.json\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /etc/docker/daemon.json\n")])])]),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"registry-mirrors"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://s3l9h6jt.mirror.aliyuncs.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl daemon-reload\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl restart "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\n")])])]),t("h2",{attrs:{id:"安装docker-compose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装docker-compose"}},[e._v("#")]),e._v(" 安装docker-compose")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("yum "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" epel-release\nyum "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker-compose")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker-compose")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--version")]),e._v("\n")])])]),t("p",[e._v("语法\ndocker rmi 镜像名// 删除镜像\ndocker rm 容器id// 删除容器")]),e._v(" "),t("p",[e._v("docker pull name // 拉取镜像 name为镜像名，name:tag,tag表示版本号，不写就是最新的\ndocker run name // 通过镜像name生成容器，一堆参数，需要时百度(-d 后台运行)\nexit // 关闭并退出容器，测试node容易exit不能退出，连续两次ctrl + c 才行\nctrl + p + q // 退出容器，容器后台运行\ndocker start id // 启动已停止的容器（id是容器id）\ndocker restart id // 重启容器\ndocker stop id // 停止容器\ndocker kill id // 杀掉容器id为id的容器\ndocker run --name nginx-test -p 8888:80 -d nginx // 端口映射 将容器内的nginx的80端口暴露出8888端口（外部访问容器8888端口等于访问nginx80端口）\ndocker exec -it dockerID  bash // 进入docker容器命令行(一般来说里面很空  连vi也没有，并且还装不上)，和docker attach dockerID  一个意思\ndocker run -it -v 宿主文件（夹）路径:docker容器文件（夹）路径 docker镜像 // 将宿主文件（夹）和docker容器文件（夹）建立连接，两边数据会同步。注意：路径必须是绝对路径。举例:docker run -it -v /data/docker-stu/mytest:/mytest nginx")]),e._v(" "),t("p",[e._v("docker build:\n创建docker build文件\n例如：")]),e._v(" "),t("p",[e._v("my volume test")]),e._v(" "),t("p",[e._v('FROM nginx // 以什么基础修改，nginx\nVOLUME ["/root/data/docker-stu/mytest/div1", "/root/data/docker-stu/mytest/div2"] // 数组里的两个表示创建的容器会包含这两个路径的连接,对应宿主路径在docker inspect dockerid的Mounts里面找\nCMD echo "success"\nCMD /bin/bash\n使用\ndocker build -f /root/data/docker-stu/mytest/file -t kition/nginx . // 记得加.   生成镜像')]),e._v(" "),t("p",[e._v("docker build 关键字\nFROM                    // 基础镜像\nMAINTAINER         // 镜像维护者姓名和邮箱\nRUN                       // 构建容器时需要运行的命令\nEXPOSE                 // 当前容器对外暴露的端口\nWORKDIR             // 终端登陆过后的落脚点（工作目录）\nENV                      // 构建镜像过程中的环境变量设置\nADD                     // copy + 解压。注意：add和copy如果要复制或添加文件，需要把文件放到当前build文件所在目录，然后直接进写名字。add过后只有解压后的文件，不会保留源文件\nCOPY                    // 拷贝文件和目录到镜像中，将从构建上下文目录中<原路径>的文件/目录复制到新的一层的镜像内的<目标路径>位置\nVOLUME              // 设置容器数据卷\nCMD                    // 指定一个容器启动时药运行的命令，如果有多个，则只有最后一个生效\nENTRYPOINT       // 指定一个容器启动时药运行的命令，如果有多个，多个都生效\nONBUILD            // 父镜像呗子镜像继承时触发，类似生命钩子")]),e._v(" "),t("p",[e._v("docker网络:\n推荐自建网络（--link等有缺陷），也只记录自建网络\n创建网络：\ndocker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 bridgenet // 创建一个名叫bridgenet（不要叫bridge，这个默认是docker0的）的网络，模式是bridge（桥接，默认不写就是这个），子网为192.168.0.0,16表示占两位，网关为192.168.0.1\n测试网络（以node容器测试，创建两个用bridgenet的容器，让两个容器互相ping）：\ndocker run -d -it --name mynet1 --net bridgenet node\ndocker run -d -it --name mynet2 --net bridgenet node\ndocker exec -it mynet1 ping mynet2")]),e._v(" "),t("p",[e._v("同主机跨网卡（docker0网卡和自建网卡为例）连通网络\ndocker run -d -it --name mynet3 node // 不写--net bridgenet表示使用默认的docker0网卡\n此时直接ping（docker exec -it mynet1 ping mynet3）会报错ping: mynet3: Temporary failure in name resolution\ndocker network connect bridgenet mynet3 // 将容器mynet3添加到bridgenet网卡下（mynet3将拥有双ip）\n此时ping将会连通")]),e._v(" "),t("p",[e._v("docker run --name studymysql -p 3306:3306 -v /opt/docker_v/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=614489858 -d mysql:5.7")])])}),[],!1,null,null,null);t.default=r.exports}}]);