(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{395:function(t,n,s){"use strict";s.r(n);var a=s(10),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"算法-希尔排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法-希尔排序"}},[t._v("#")]),t._v(" "),n("center",[t._v("算法-希尔排序"),n("center")],1)],1),t._v(" "),n("p",[t._v("希尔排序是一种基于直接插入排序的更高效的插入排序算法。改进在将关键码进行基本有序排列和分批排序。")]),t._v(" "),n("h2",{attrs:{id:"思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),n("p",[t._v("对于待排序的序列，先取一个正整数d1(通常为元素个数/2)作为第一增量，把文件的全部记录分成多个组。所有距离为d1的倍数的记录放在同一个组中。先在各组内进行直接插入排序；然后，取第二个增量d2(通常为d1/2)，重复上述的分组和排序直到dn=1时结束。")]),t._v(" "),n("h2",{attrs:{id:"实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('package main\n\nimport "fmt"\n\nfunc sort(list []int) {\n\tlength := len(list)\n\tif length <= 1 {\n\t\treturn\n\t}\n    // 增量d通常为元素个数/2，且每次折半，直到d=1\n\tfor d := length / 2; d > 0; d = d / 2 {\n        // 插入排序\n\t\tfor i := d + 1; i < length; i++ {\n\t\t\tc := i\n\t\t\tfor c >= d && list[c] < list[c-d] {\n\t\t\t\tlist[c], list[c-d] = list[c-d], list[c]\n\t\t\t\tc -= d\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc main() {\n\tlist := []int{40, 25, 49, 25, 16, 21, 8, 30, 13}\n\tsort(list)\n\tfmt.Println(list)\n}\n\n')])])]),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[t._v("go run ."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("main.go\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("[8 13 16 21 25 25 30 40 49]\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);